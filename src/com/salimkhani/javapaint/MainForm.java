/*
 * Mahdi Salimkhani

 */
package com.salimkhani.javapaint;

import com.salimkhani.javapaint.application.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import javax.swing.*;
import org.javatuples.Pair;

/**
 *
 * @author mahdi
 */
public class MainForm extends javax.swing.JFrame {
    private boolean isEntered = false;    
    private boolean isSelected = false;
    private Shape selectedShape = null;
    private Shape clipboardShape = null;

    private Point p1, p2;
    private ArrayList<Point> pointsForPoly;
    private ArrayList<Circle> polygonePoints;
    private ActionTypes actionType;
    private ShapeTypes curShape;
    private Color curBorColor = Color.black;
    private Color curFillColor = Color.white;
    Point mousePt = null;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        actionType = ActionTypes.Draw;
        p1 = p2 = null;
        curShape = null;
        pointsForPoly = new ArrayList<>();
        polygonePoints = new ArrayList<>();
        var deleteMenuItem = new JMenuItem("Delete");
        var copyMenuItem = new JMenuItem("Copy");
        var pasteMenuItem = new JMenuItem("Paste");
        var colorSectionSubMenu = new JMenu("Color");
        var pushFrontMenuItem = new JMenuItem("Push to Front");
        var setFillColorMenuItem = new JMenuItem("Set Fill Color");
        var setBorderColorMenuItem = new JMenuItem("Set Border Color");
        var removeFillColorMenuItem = new JMenuItem("Remove Fill Color");
        var removeBorderColorMenuItem = new JMenuItem("Remove Border Color");
        var zoomSubMenu = new JMenu("Zoom");
        var zoomInMenuItem = new JMenuItem("+");
        var zoomOutMenuItem = new JMenuItem("-");
        zoomSubMenu.add(zoomInMenuItem);
        zoomSubMenu.add(zoomOutMenuItem);
        deleteMenuItem.addActionListener((e) -> {
            btnDeleteMenuItemActionPerformed(e);
        });
        copyMenuItem.addActionListener(((e) -> {
            btnCopyMenuItemActionPerformed(e);
        }));
        pasteMenuItem.addActionListener(((e) -> {
            btnPasteMenuItemActionPerformed(e);
        }));
        pushFrontMenuItem.addActionListener(((e)->{pushFrontMenuItemActionPerformed(e);}));
        setFillColorMenuItem.addActionListener((e) -> {setFillColorMenuItemActionPerformed(e);});
        setBorderColorMenuItem.addActionListener((e) -> setBorderColorMenuItemActionPerformed(e));
        removeFillColorMenuItem.addActionListener((e) -> removeFillColorMenuItemActionPerformed(e));
        removeBorderColorMenuItem.addActionListener((e) -> removeBorderColorMenuItemActionPerformded(e));
        zoomInMenuItem.addActionListener((e)->{zoomInMenuItemActionPerformed(e);});
        zoomOutMenuItem.addActionListener((e)->{zoomOutMenuItemActionPerformed(e);});
        colorSectionSubMenu.add(setFillColorMenuItem);
        colorSectionSubMenu.add(setBorderColorMenuItem);
        colorSectionSubMenu.add(removeFillColorMenuItem);
        colorSectionSubMenu.add(removeBorderColorMenuItem);
        menuPanel.add(zoomSubMenu);
        menuPanel.add(pushFrontMenuItem);
        menuPanel.add(colorSectionSubMenu);
        menuPanel.add(deleteMenuItem);        
        menuPanel.add(copyMenuItem);        
        menuPanel.add(pasteMenuItem);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JPopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnLine = new javax.swing.JButton();
        btnRect = new javax.swing.JButton();
        btnCircle = new javax.swing.JButton();
        btnTriangle = new javax.swing.JButton();
        btnPoly = new javax.swing.JButton();
        btnOval = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnErase = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        btnResetZoom = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        fillCheck = new javax.swing.JCheckBox();
        borderCheck = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnFillColorChoose = new javax.swing.JButton();
        btnBorColorChoose = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        eraserSize = new javax.swing.JSlider();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        lblPoint = new javax.swing.JLabel();
        pnlPaint = new com.salimkhani.javapaint.PaintingPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(752, 43));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setBorder(null);
        jToolBar1.add(jSeparator3);

        btnLine.setText("Line");
        btnLine.setFocusable(false);
        btnLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLine);

        btnRect.setText("Rectangle");
        btnRect.setFocusable(false);
        btnRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRect);

        btnCircle.setText("Circle");
        btnCircle.setFocusable(false);
        btnCircle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCircle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCircleActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCircle);

        btnTriangle.setText("Triangle");
        btnTriangle.setFocusable(false);
        btnTriangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTriangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTriangleActionPerformed(evt);
            }
        });
        jToolBar1.add(btnTriangle);

        btnPoly.setText("PolyGone");
        btnPoly.setFocusable(false);
        btnPoly.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPoly.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPoly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPolyActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPoly);

        btnOval.setText("Oval");
        btnOval.setFocusable(false);
        btnOval.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOval.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOvalActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOval);
        jToolBar1.add(jSeparator5);

        btnErase.setText("Eraser");
        btnErase.setFocusable(false);
        btnErase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnErase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnErase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnErase);

        btnSelect.setText("Select");
        btnSelect.setFocusable(false);
        btnSelect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSelect);

        btnResetZoom.setText("Reset Zoom");
        btnResetZoom.setFocusable(false);
        btnResetZoom.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnResetZoom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnResetZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetZoomActionPerformed(evt);
            }
        });
        jToolBar1.add(btnResetZoom);
        jToolBar1.add(jSeparator2);

        fillCheck.setText("Have filled?");
        fillCheck.setFocusable(false);
        fillCheck.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillCheck.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(fillCheck);

        borderCheck.setText("Have Border?");
        borderCheck.setFocusable(false);
        borderCheck.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        borderCheck.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(borderCheck);
        jToolBar1.add(jSeparator4);

        btnFillColorChoose.setText("FillColor Chooser");
        btnFillColorChoose.setFocusable(false);
        btnFillColorChoose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFillColorChoose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFillColorChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillColorChooseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFillColorChoose);

        btnBorColorChoose.setText("Border Color Chooser");
        btnBorColorChoose.setFocusable(false);
        btnBorColorChoose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBorColorChoose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBorColorChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorColorChooseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnBorColorChoose);
        jToolBar1.add(jSeparator1);

        jLabel2.setText("Eraser Size :");
        jToolBar1.add(jLabel2);

        eraserSize.setMajorTickSpacing(10);
        eraserSize.setMaximum(50);
        eraserSize.setMinimum(1);
        eraserSize.setMinorTickSpacing(2);
        eraserSize.setPaintTicks(true);
        eraserSize.setValue(25);
        jToolBar1.add(eraserSize);

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setBorder(null);

        jLabel1.setText(" Point :   ");
        jToolBar2.add(jLabel1);
        jToolBar2.add(lblPoint);

        pnlPaint.setBackground(new java.awt.Color(255, 255, 255));
        pnlPaint.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlPaintMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pnlPaintMouseMoved(evt);
            }
        });
        pnlPaint.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                pnlPaintMouseWheelMoved(evt);
            }
        });
        pnlPaint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlPaintMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlPaintMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pnlPaintMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlPaintMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlPaintMouseReleased(evt);
            }
        });
        pnlPaint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnlPaintKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnlPaintKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlPaintLayout = new javax.swing.GroupLayout(pnlPaint);
        pnlPaint.setLayout(pnlPaintLayout);
        pnlPaintLayout.setHorizontalGroup(
            pnlPaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlPaintLayout.setVerticalGroup(
            pnlPaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        actionType = ActionTypes.Draw;
        curShape = ShapeTypes.Line;
    }//GEN-LAST:event_btnLineActionPerformed

    private void btnEraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseActionPerformed
        actionType = ActionTypes.Erase;
    }//GEN-LAST:event_btnEraseActionPerformed

    private void btnCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCircleActionPerformed
        actionType = ActionTypes.Draw;
        curShape = ShapeTypes.Circle;
    }//GEN-LAST:event_btnCircleActionPerformed

    private void btnFillColorChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillColorChooseActionPerformed
        Color color = JColorChooser.showDialog(this, "Select Fill Color", curFillColor);
        btnFillColorChoose.setBackground(color);
        curFillColor = color;
    }//GEN-LAST:event_btnFillColorChooseActionPerformed
    private void btnCopyMenuItemActionPerformed(ActionEvent e) {
        if(isSelected && selectedShape != null)
        {
            clipboardShape = selectedShape.copy();
        }
    }

    private void btnPasteMenuItemActionPerformed(ActionEvent e) {
        if(clipboardShape != null)
        {
            clipboardShape.move(10, 10);
            pnlPaint.drawComponent(clipboardShape);
        }
        clipboardShape = null;
        isSelected = false;
    }
    private void btnDeleteMenuItemActionPerformed(ActionEvent e) {
        if(isSelected && selectedShape != null)
        {
            pnlPaint.removeComponet(selectedShape);
        }
        isSelected = false;
    }
    private void pushFrontMenuItemActionPerformed(ActionEvent e)
    {
        if(selectedShape != null && isSelected)
        {
            pnlPaint.pushComponentToFront(selectedShape);
        }
        isSelected = false;
    }
    private void setFillColorMenuItemActionPerformed(ActionEvent e)
    {
        if(selectedShape != null && isSelected)
        {
            selectedShape.fillColor = curFillColor;
            selectedShape.isFill = true;
            pnlPaint.repaint();
        }
        isSelected = false;
    }
    private void setBorderColorMenuItemActionPerformed(ActionEvent e)
    {
        if(selectedShape != null && isSelected)
        {
            selectedShape.borderColor = curBorColor;
            selectedShape.isBorder = true;
            pnlPaint.repaint();
        }
        isSelected = false;
    }
    private void removeFillColorMenuItemActionPerformed(ActionEvent e) {
        if(selectedShape != null && isSelected)
        {
            selectedShape.isFill = false;
            pnlPaint.repaint();
        }
        isSelected = false;
    }

    private void removeBorderColorMenuItemActionPerformded(ActionEvent e) {
        if(selectedShape != null && isSelected)
        {
            selectedShape.isBorder = false;
            pnlPaint.repaint();
        }
        isSelected = false;
    }
    private void zoomInMenuItemActionPerformed(ActionEvent e) {
        if(selectedShape != null & isSelected)
        {
            pnlPaint.zoomInComponent(selectedShape);
            pnlPaint.repaint();
        }
        isSelected = false;
    }

    private void zoomOutMenuItemActionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    private void btnBorColorChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorColorChooseActionPerformed
        Color color = JColorChooser.showDialog(this, "Select Border Color", curBorColor);
        btnBorColorChoose.setBackground(color);
        curBorColor = color;
    }//GEN-LAST:event_btnBorColorChooseActionPerformed

    private void btnRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectActionPerformed
        curShape = ShapeTypes.Rectangle;
        actionType = ActionTypes.Draw;
    }//GEN-LAST:event_btnRectActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        pnlPaint.repaint();
    }//GEN-LAST:event_formComponentResized

    private void pnlPaintMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMousePressed
        
        if(actionType == ActionTypes.Draw)
        {
            p1 = Point.New(evt.getX(), evt.getY());
        }
        if(actionType == ActionTypes.Move)
        {
            mousePt = Point.New(evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_pnlPaintMousePressed

    private void pnlPaintMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseReleased
        if(actionType == ActionTypes.Draw)
        {
            p2 = Point.New(evt.getX(), evt.getY());
            if(curShape == null) {
                return;
            }
            switch (curShape) {
                case Line -> {
                    if(!(p1 == null || p2 == null))
                    {
                        pnlPaint.drawComponent(Line.New(p1, p2, curBorColor));
                    }
                }
                case Rectangle -> {
                    
                    if(!(p1 == null || p2 == null))
                    {
                        pnlPaint.drawComponent(Rectangle.New(p1, p2, curBorColor, curFillColor, fillCheck.isSelected(), borderCheck.isSelected()));
                    }
                }
                case Circle -> {
                    if(!(p1 == null || p2 == null))
                    {
                        pnlPaint.drawComponent(Circle.New(p1, (int)p2.distance(p1), curBorColor, curFillColor, fillCheck.isSelected(), borderCheck.isSelected()));
                    }
                }
                case Oval -> {
                    if(!(p1 == null || p2 == null))
                    {
                        pnlPaint.drawComponent(Oval.New(p1, p2, curBorColor, curFillColor, fillCheck.isSelected(), borderCheck.isSelected()));
                    }
                }
                        
            }
        }
    }//GEN-LAST:event_pnlPaintMouseReleased

    private void btnTriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriangleActionPerformed
        curShape = ShapeTypes.Triangle;
        actionType = ActionTypes.Draw;
    }//GEN-LAST:event_btnTriangleActionPerformed

    private void pnlPaintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseClicked
        if(evt.isMetaDown())
        {
            menuPanel.show(pnlPaint, evt.getX(), evt.getY());
        }
        var p = Point.New(evt.getX(), evt.getY());
        if(actionType == ActionTypes.Move)
        {
            Pair<Boolean, Shape> selected = pnlPaint.selectComponent(p);
            isSelected = selected.getValue0();
            selectedShape = selected.getValue1();
        }
        if(actionType == ActionTypes.Draw)
        {
            if(curShape == null) {
                return;
            }
        switch (curShape) {
            case Triangle ->{
                if(pointsForPoly.size() == 3)
                {
                    pnlPaint.repaint();
                    pnlPaint.drawComponent(Triangle.New(pointsForPoly.get(0), pointsForPoly.get(1), pointsForPoly.get(2), curBorColor, curFillColor, fillCheck.isSelected(), borderCheck.isSelected()));
                    pointsForPoly.clear();
                }
                else {
                    pointsForPoly.add(p);
                    var tP = Point.New(evt.getX() + 2, evt.getY() + 2);
                    Circle.New(p, (int) tP.distance(p), Color.black, Color.black, true, true).draw(pnlPaint.getGraphics());
                }
            }
            case Polygone->{
                if(!polygonePoints.isEmpty() && polygonePoints.get(0).hit(p))
                {
                    pnlPaint.repaint();
                    pnlPaint.drawComponent(Polygone.New(pointsForPoly, curBorColor, curFillColor, fillCheck.isSelected(), borderCheck.isSelected()));
                    pointsForPoly.clear();
                    polygonePoints.clear();
                }
                else {
                    pointsForPoly.add(p);
                    var tP = Point.New(evt.getX() + 2, evt.getY() + 2);
                    var c = Circle.New(p, (int) tP.distance(p), Color.black, Color.black, true, true);
                    c.draw(pnlPaint.getGraphics());
                    polygonePoints.add(c);
                }
            }
        }
        }
    }//GEN-LAST:event_pnlPaintMouseClicked
    
    private void pnlPaintMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseEntered
        isEntered = true;
    }//GEN-LAST:event_pnlPaintMouseEntered

    private void pnlPaintMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseMoved
        lblPoint.setText("(" + evt.getX() + ", " + evt.getY() + ")");
    }//GEN-LAST:event_pnlPaintMouseMoved

    private void pnlPaintMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseExited
        isEntered = false;
        lblPoint.setText("(--, --)");
    }//GEN-LAST:event_pnlPaintMouseExited

    private void pnlPaintMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_pnlPaintMouseWheelMoved
        
    }//GEN-LAST:event_pnlPaintMouseWheelMoved

    private void btnPolyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPolyActionPerformed
        actionType = ActionTypes.Draw;
        curShape = ShapeTypes.Polygone;
    }//GEN-LAST:event_btnPolyActionPerformed

    private void pnlPaintMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlPaintMouseDragged
        if(actionType == ActionTypes.Erase)
        {
            pnlPaint.drawComponent(Circle.New(Point.New(evt.getX(), evt.getY()), eraserSize.getValue(), Color.white, Color.white, true, false));
        }
        if(actionType == ActionTypes.Move && isSelected && selectedShape != null)
        {
            if(selectedShape.hit(Point.New(evt.getX(), evt.getY())))
            {
                int dx = evt.getX() - mousePt.getX();
                int dy = evt.getY() - mousePt.getY();
                selectedShape.move(dx, dy);
                mousePt = Point.New(evt.getX(), evt.getY());
                pnlPaint.repaint();
            }
        }
    }//GEN-LAST:event_pnlPaintMouseDragged

    private void btnOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOvalActionPerformed
        actionType = ActionTypes.Draw;
        curShape = ShapeTypes.Oval;
    }//GEN-LAST:event_btnOvalActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        actionType = ActionTypes.Move;
    }//GEN-LAST:event_btnSelectActionPerformed

    private void pnlPaintKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlPaintKeyTyped
        if(evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            if(isSelected && selectedShape != null)
            {
                pnlPaint.removeComponet(selectedShape);
            }
        }
    }//GEN-LAST:event_pnlPaintKeyTyped

    private void pnlPaintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlPaintKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            if(isSelected && selectedShape != null)
            {
                
                pnlPaint.removeComponet(selectedShape);
            }
        }
    }//GEN-LAST:event_pnlPaintKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            if(isSelected && selectedShape != null)
            {
                pnlPaint.removeComponet(selectedShape);
            }
        }
    }//GEN-LAST:event_formKeyPressed

    private void btnResetZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetZoomActionPerformed
        pnlPaint.repaint();
    }//GEN-LAST:event_btnResetZoomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //System.out.println(info.getName());
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox borderCheck;
    private javax.swing.JButton btnBorColorChoose;
    private javax.swing.JButton btnCircle;
    private javax.swing.JButton btnErase;
    private javax.swing.JButton btnFillColorChoose;
    private javax.swing.JButton btnLine;
    private javax.swing.JButton btnOval;
    private javax.swing.JButton btnPoly;
    private javax.swing.JButton btnRect;
    private javax.swing.JButton btnResetZoom;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnTriangle;
    private javax.swing.JSlider eraserSize;
    private javax.swing.JCheckBox fillCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel lblPoint;
    private javax.swing.JPopupMenu menuPanel;
    private com.salimkhani.javapaint.PaintingPanel pnlPaint;
    // End of variables declaration//GEN-END:variables
}
